# PrepBufr to NetCDF Configurations

# section heading for [config] variables - all items below this line and
# before the next section heading correspond to the [config] section
[config]

OUTPUT_BASE = {ENV[output_base]}
LOG_LINE_FORMAT =

# List of applications to run - only PB2NC for this case
PROCESS_LIST = PB2NC

# time looping - options are INIT, VALID, RETRO, and REALTIME
# If set to INIT or RETRO:
#   INIT_TIME_FMT, INIT_BEG, INIT_END, and INIT_INCREMENT must also be set
# If set to VALID or REALTIME:
#   VALID_TIME_FMT, VALID_BEG, VALID_END, and VALID_INCREMENT must also be set
LOOP_BY = VALID

# Format of VALID_BEG and VALID_END using % items
# %Y = 4 digit year, %m = 2 digit month, %d = 2 digit day, etc.
# see www.strftime.org for more information
# %Y%m%d%H expands to YYYYMMDDHH
VALID_TIME_FMT = %Y%m%d%H

# Start time for METplus run - must match VALID_TIME_FMT
VALID_BEG = {ENV[vday]}{ENV[vbeg]}

# End time for METplus run - must match VALID_TIME_FMT
VALID_END = {ENV[vday]}{ENV[vbeg]}

# Increment between METplus runs (in seconds if no units are specified)
#  Must be >= 60 seconds
VALID_INCREMENT = 1M

# List of forecast leads to process for each run time (init or valid)
# In hours if units are not specified
# If unset, defaults to 0 (don't loop through forecast leads)
LEAD_SEQ = 0

# Order of loops to process data - Options are times, processes
# Not relevant if only one item is in the PROCESS_LIST
# times = run all wrappers in the PROCESS_LIST for a single run time, then
#   increment the run time and run all wrappers again until all times have
#   been evaluated.
# processes = run the first wrapper in the PROCESS_LIST for all times
#   specified, then repeat for the next item in the PROCESS_LIST until all
#   wrappers have been run
LOOP_ORDER = processes

# Location of MET config file to pass to PB2NC
# References CONFIG_DIR from the [dir] section
PB2NC_CONFIG_FILE = {METPLUS_BASE}/parm/met_config/PB2NCConfig_wrapped

# If set to True, skip run if the output file determined by the output directory and
# filename template already exists
PB2NC_SKIP_IF_OUTPUT_EXISTS = True

# Values to pass to pb2nc config file using environment variables of the same name.
# See MET User's Guide for more information
PB2NC_GRID = {ENV[verif_grid]} 
PB2NC_POLY =
PB2NC_STATION_ID =
PB2NC_MESSAGE_TYPE = ADPUPA

PB2NC_QUALITY_MARK_THRESH = 9


PB2NC_OBS_BUFR_VAR_LIST = ZOB, TOB, UOB, VOB, D_RH, D_WIND

PB2NC_OBS_BUFR_MAP =   { key = "ZOB"; val = "HGT"; }, { key = "TOB"; val = "TMP"; }, { key = "UOB"; val = "UGRD"; }, { key = "VOB"; val = "VGRD"; }, { key = "D_RH"; val = "RH"; }, { key = "D_WIND"; val = "WIND"; } ;


# End of [config] section and start of [dir] section
[dir]
# location of configuration files used by MET applications
CONFIG_DIR = {PARM_BASE}/met_config

# directory containing input to PB2NC
PB2NC_INPUT_DIR = {ENV[bufrpath]}

# directory to write output from PB2NC
PB2NC_OUTPUT_DIR = {OUTPUT_BASE}/prepbufr_nc
METPLUS_CONF = {OUTPUT_BASE}/final_pb2nc_{ENV[vbeg]}_{ENV[verif_grid]}.conf

# End of [dir] section and start of [filename_templates] section
[filename_templates]
# Template to look for forecast input to PB2NC relative to PB2NC_INPUT_DIR
PB2NC_INPUT_TEMPLATE = prepbufr.{da_init?fmt=%Y%m%d}/rap.t{da_init?fmt=%H}z.{ENV[verif_grid]}.prepbufr

# Template to use to write output from PB2NC
PB2NC_OUTPUT_TEMPLATE = prepbufr_profile.t{da_init?fmt=%H}z.{ENV[verif_grid]}.nc
