[dir]

OUTPUT_BASE = {ENV[DATA]}

# Full path to .stat files, can use wildcards if in multiple directories
STAT_ANALYSIS_OUTPUT_DIR = {ENV[finalstat]}

# Location of configuration files used by MET applications

MODEL1_STAT_ANALYSIS_LOOKIN_DIR = {ENV[finalstat]}/*{ENV[outtyp]}{ENV[bcout]}*

[config]
METPLUS_CONF = {OUTPUT_BASE}/conf/{MODEL1}/metplus_final_statanalysis_gatherbydate.conf

LOG_METPLUS = {LOG_DIR}/{MODEL1}/metplus.statanalysis.log.{LOG_TIMESTAMP_TEMPLATE}

# List of applications to run
# times will loop through dates
LOOP_ORDER = times
PROCESS_LIST = StatAnalysis

LOOP_BY = VALID
VALID_TIME_FMT = %Y%m%d
# Start time for METplus run
VALID_BEG = {ENV[VDATE]}
# End time for METplus run
VALID_END = {ENV[VDATE]}
# Increment between METplus runs in seconds. Must be >= 60
VALID_INCREMENT = 86400

MODEL_LIST = {MODEL1}
#FCST_VALID_HOUR_LIST = 00, 01, 02, 03, 04, 05, 06, 07, 08, 09, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23
FCST_VALID_HOUR_LIST =
GROUP_LIST_ITEMS =
LOOP_LIST_ITEMS = MODEL_LIST

OBTYPE =
MODEL = {ENV[MOD]}
MODEL1 = {ENV[model1]}
MODEL1_OBTYPE = AIRNOW_DAILY_V2

STAT_ANALYSIS_CONFIG_FILE = {PARM_BASE}/met_config/STATAnalysisConfig_wrapped

# stat_analysis job info
STAT_ANALYSIS_JOB_NAME = filter
# if using -dump_row, put in JOBS_ARGS "-dump_row [dump_row_filename]"
# if using -out_stat, put in JOBS_ARGS "-out_stat [out_stat_filename]"
# METplus will fill in filename
STAT_ANALYSIS_JOB_ARGS = -dump_row [dump_row_filename]

# Optional variables for further filtering
# if more than one use comma separated list
#MODEL_LIST = {MODEL_NAME}
#DESC =
#FCST_LEAD =
#FCST_VAR_NAME =
#FCST_VAR_LEVEL =
#OBS_VAR_NAME =
#OBS_VAR_LEVEL =
#REGION =
#INTERP =
#INTERP_PTS =
#FCST_THRESH =
#COV_THRESH =
#LINE_TYPE =

[filename_templates]
# Optional settings to create templated directory and file name information
# to save files as stat_analysis out as, this is appended to STAT_ANALYSIS_OUTPUT_DIR
# if no template is provided a default filename set in the code will be used
# this can be tricky to set up but can be very useful
# for example, it doesn't make sense to use {init?fmt=%Y%m%d} if
# LOOP_BY = VALID, but if INIT_HOUR_METHOD = LOOP
# {init?fmt=%H} makes sense!
# aceepted key options: valid, init
# if wanting to include information when (VALID)(INIT)_HOUR_METHOD = GROUP
# put this information directly in the template, ex. {INIT_HOUR_END}
# additional conf items can be specided in the template as well
#STAT_ANALYSIS_DUMP_ROW_TMPL = {valid?fmt=%H}Z/{MODEL_NAME}/{MODEL_NAME}_{valid?fmt=%Y%m%d}.stat
#STAT_ANALYSIS_DUMP_ROW_TEMPLATE =  {valid_beg?fmt=%Y%m%d}/{MODEL1}_{valid_beg?fmt=%Y%m%d}.stat
#STAT_ANALYSIS_DUMP_ROW_TEMPLATE = {MODEL1}_{ENV[regionnest]}_{valid_beg?fmt=%Y%m%d}.stat
#STAT_ANALYSIS_DUMP_ROW_TEMPLATE = OZONEMAX{ENV[bcout]}_{valid_beg?fmt=%Y%m%d}.stat
#STAT_ANALYSIS_DUMP_ROW_TEMPLATE = ozmax8{ENV[bcout]}_{ENV[RUN]}_{ENV[VERIF_CASE]}_v{valid_beg?fmt=%Y%m%d}.stat
STAT_ANALYSIS_DUMP_ROW_TEMPLATE = evs.stats.aqm{ENV[bcout]}.{ENV[RUN]}.{ENV[VERIF_CASE]}_ozmax8.v{valid_beg?fmt=%Y%m%d}.stat
#STAT_ANALYSIS_DUMP_ROW_TEMPLATE = OZONEMAX_{valid_beg?fmt=%Y%m%d}.stat
STAT_ANALYSIS_OUT_STAT_TEMPLATE =
