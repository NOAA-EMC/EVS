# StatAnalysis METplus Configuration

# section heading for [config] variables - all items below this line and
# before the next section heading correspond to the [config] section
[config]

# List of applications to run - only StatAnalysis for this case
PROCESS_LIST = StatAnalysis

# time looping - options are INIT, VALID, RETRO, and REALTIME
# If set to INIT or RETRO:
#   INIT_TIME_FMT, INIT_BEG, INIT_END, and INIT_INCREMENT must also be set
# If set to VALID or REALTIME:
#   VALID_TIME_FMT, VALID_BEG, VALID_END, and VALID_INCREMENT must also be set
LOOP_BY = VALID

# Format of INIT_BEG and INT_END using % items
# %Y = 4 digit year, %m = 2 digit month, %d = 2 digit day, etc.
# %Y%m%d%H expands to YYYYMMDDHH
VALID_TIME_FMT = %Y%m%d

# Start time for METplus run - must match INIT_TIME_FMT
VALID_BEG = {ENV[VDATE]}

# End time for METplus run - must match INIT_TIME_FMT
VALID_END = {ENV[VDATE]}

# Increment between METplus runs (in seconds if no units are specified)
#  Must be >= 60 seconds
VALID_INCREMENT = 24H

# List of forecast leads to process for each run time (init or valid)
# In hours if units are not specified
# If unset, defaults to 0 (don't loop through forecast leads)
LEAD_SEQ = 000, 024, 048, 072, 096, 120, 144, 168, 192

# Order of loops to process data - Options are times, processes
# Not relevant if only one item is in the PROCESS_LIST
# times = run all wrappers in the PROCESS_LIST for a single run time, then
#   increment the run time and run all wrappers again until all times have
#   been evaluated.
# processes = run the first wrapper in the PROCESS_LIST for all times
#   specified, then repeat for the next item in the PROCESS_LIST until all
#   wrappers have been run
LOOP_ORDER = processes


# Models to process
# MODELn is the model name to filter for in
#           stat files [required]
# MODELn_OBTYPE is the observation name
#               to filter for the .stat files
#               [required]
# MODELn_STAT_ANALYSIS_LOOKIN_DIR is the directory to search for
#                                 the .stat files in, wildcards (*)
#                                 are okay to search for multiple
#                                 directories and templates like
#                                 {valid?fmt=%Y%m%d%H%M%S} [required]
# MODELn_REFERENCE_NAME is a reference name for MODELn, defaults to
#                       MODELn, it can be used in the file template names
#                       [optional]
MODEL1 = RTOFS
MODEL1_OBTYPE = {ENV[RUNupper]}

# Location of MET config file to pass to StatAnalysis
STAT_ANALYSIS_CONFIG_FILE = {PARM_BASE}/met_config/STATAnalysisConfig_wrapped

# stat_analysis job info
STAT_ANALYSIS_JOB_NAME = filter

# if using -dump_row, put in JOBS_ARGS "-dump_row [dump_row_file]"
# if using -out_stat, put in JOBS_ARGS "-out_stat [out_stat_file]"
# METplus will fill in filename
STAT_ANALYSIS_JOB_ARGS = -dump_row [dump_row_file]

# Optional variables for further filtering
# can be blank, single, or multiple values
# if more than one use comma separated list
# (FCST)(OBS)_(VALID)(INIT)_HOUR_LIST: HH format (ex. 00, 06, 12)
# (FCST)(OBS)_LEAD_LIST: HH[H][MMSS] format (ex. 00, 06, 120)
MODEL_LIST = {MODEL1}
DESC_LIST =
FCST_LEAD_LIST =
OBS_LEAD_LIST =
FCST_VALID_HOUR_LIST = 
FCST_INIT_HOUR_LIST = 
OBS_VALID_HOUR_LIST =
OBS_INIT_HOUR_LIST =
FCST_VAR_LIST = 
OBS_VAR_LIST =
FCST_UNITS_LIST =
OBS_UNITS_LIST =
FCST_LEVEL_LIST =
OBS_LEVEL_LIST =
VX_MASK_LIST =
INTERP_MTHD_LIST =
INTERP_PNTS_LIST =
FCST_THRESH_LIST =
OBS_THRESH_LIST =
COV_THRESH_LIST =
ALPHA_LIST =
LINE_TYPE_LIST =

# how to treat items listed in above _LIST variables
# GROUP_LIST_ITEMS: items listed in a given _LIST variable
#                   will be grouped together
# LOOP_LIST_ITEMS:  items listed in a give _LIST variable
#                   will be looped over
# if not listed METplus will treat the list as a group
#GROUP_LIST_ITEMS = MODEL_LIST
LOOP_LIST_ITEMS = MODEL_LIST

MODEL1_STAT_ANALYSIS_LOOKIN_DIR = {ENV[STATSOUT]}

INPUT_BASE = {ENV[STATSOUT]}

# Output data directory
STAT_ANALYSIS_OUTPUT_DIR = {ENV[STATSOUT]}

#STAT_ANALYSIS_OUTPUT_TEMPLATE = job.out

# Optional settings to create templated directory and file name information
# to save files as stat_analysis output as, this is appended to STAT_ANALYSIS_OUTPUT_DIR
# if no template is provided a default filename set in the code will be used
# Use:
# string templates can be set for all the lists being looped over, just
# use and a lower case version of the list, ex. {fcst_valid_hour?fmt=%H}
# or {fcst_var?fmt=%s}
# For looping over models:
# can set MODELn_STAT_ANALYSIS_[DUMP_ROW/OUT_STAT]_TEMPLATE for individual models
# or STAT_ANALYSIS_[DUMP_ROW/OUT_STAT] with {model?fmt=%s}
MODEL1_STAT_ANALYSIS_DUMP_ROW_TEMPLATE = evs.stats.{ENV[COMPONENT]}.{ENV[RUN]}.{ENV[VERIF_CASE]}_{ENV[VAR]}.v{ENV[VDATE]}.stat
