#!/bin/bash -e
# Configuration file to make plots using MET/METplus stat files.
set -x

# Case type settings are used to check if settings are allowed.
export VERIF_CASE=${VERIF_CASE}
export VERIF_TYPE="rtofs"

# Used to name the graphics ouput files. File names will start with the
# URL_HEADER, followed by plot details. Leave blank ("") to include only plot
# details in the file names.
export URL_HEADER=""

# Directory settings. Make sure USH_DIR, PRUNE_DIR, and SAVE_DIR point to
# desired .../ush, .../data, and .../out directories. OUTPUT_BASE_DIR is the
# location of the METplus stat archive. The stat file format can be changed by
# editing the output_base_template variable in the Templates class in
# ${USH_DIR}/settings.py.
export USH_DIR=$USHevs/$COMPONENT
export FIX_DIR=$FIXevs/logos
export PRUNE_DIR=$DATA/tmp/$COMPONENT
export SAVE_DIR=$DATA/plots/$COMPONENT/rtofs.${VDATE}
export OUTPUT_BASE_DIR=$COMIN/stats/$COMPONENT

# Logfile settings. Log level options are "DEBUG", "INFO", "WARNING", "ERROR",
# and "CRITICAL".
export LOG_METPLUS="$DATA/logs/$COMPONENT/verif_plotting.`date '+%Y%m%d%H%M%S'`_$$.log"
export LOG_LEVEL="DEBUG"

# Version of MET listed in the METplus stat files used to create graphics.
IFS='.' read -ra MET_VER <<< "$met_ver"
printf -v MET_VERSION '%s.' "${MET_VER[@]:0:2}"
export MET_VERSION="${MET_VERSION%.}"

# Will use statistics for all comma-separated models. Names must match the
# model naming convention in ${OUTPUT_BASE_DIR}.
export MODEL="RTOFS"
export OBTYPE=$OBTYPE
export RUN=$RUN

# Will use valid or init datetimes based on the setting below. Options are
# "VALID" or "INIT".
export DATE_TYPE="VALID"

# Will choose a valid or init range based on a preset EVAL_PERIOD. Use "TEST"
# if you want to use the custom-defined range below. Presets are defined in
# ${USH_DIR}/settings.py in the Presets() class. 
export EVAL_PERIOD=$PERIOD

# If EVAL_PERIOD="TEST", will use statistics from the valid or init range
# below. If not, ignores these settings. DATE_TYPE decides whether valid or
# init is used.
export VALID_BEG="20200101"
export VALID_END="20200101"
export INIT_BEG="20200101"
export INIT_END="20200101"

# Will use statistics for all comma-separated valid or init hours. DATE_TYPE
# decides whether valid or init is used.
export FCST_INIT_HOUR="0"
export FCST_VALID_HOUR="0"

# Settings below are used to select desired variable and domain.
export FCST_LEVEL="Z0"
export OBS_LEVEL="Z0"
export var_name=$VAR
export VX_MASK_LIST=$MASKS

# Will use statistics for all comma-separated lead times.
export FCST_LEAD=$FLEAD

# Line type in METplus stat files used to compute desired metric(s).
export LINE_TYPE=$LTYPE

# Interpolation, as listed in METplus stat files.
export INTERP="NEAREST"

# Will use statistics for all comma-separated thresholds. Use symbols
# (e.g., >=) to define thresholds.
export FCST_THRESH=$THRESH
export OBS_THRESH=$THRESH

# Will plot all comma-separated metrics. For performance diagram, metrics must
# be "sratio,pod,csi". Depending on the VERIF_CASE, VERIF_TYPE, and LINE_TYPE,
# only some settings are allowed.
export STATS=$METRIC

# String of True or False. If "True", will plot bootstrap confidence
# intervals. Other confidence interval settings can be configured in
# ${USH_DIR}/settings.py.
export CONFIDENCE_INTERVALS="False"

# String defining the type of plot to make. Options are "lead_average",
# "performance_diagram", "stat_by_level", "threshold_average", "time_series",
# and "valid_hour_average".
export PLOT_TYPE=$PTYPE

# Executes the desired python script. No need to edit this. 
python ${USH_DIR}/${PLOT_TYPE}.py
