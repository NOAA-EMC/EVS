# PointStat METplus Configuration

# section heading for [config] variables - all items below this line and
# before the next section heading correspond to the [config] section
[config]

# List of applications to run
PROCESS_LIST = PointStat

# time looping - options are INIT, VALID, RETRO, and REALTIME
# If set to INIT or RETRO:
#   INIT_TIME_FMT, INIT_BEG, INIT_END, and INIT_INCREMENT must also be set
# If set to VALID or REALTIME:
#   VALID_TIME_FMT, VALID_BEG, VALID_END, and VALID_INCREMENT must also be set
LOOP_BY = VALID

# Format of VALID_BEG and VALID_END using % items
# %Y = 4 digit year, %m = 2 digit month, %d = 2 digit day, etc.
# see www.strftime.org for more information
# %Y%m%d%H expands to YYYYMMDDHH
VALID_TIME_FMT = %Y%m%d

# Start time for METplus run - must match VALID_TIME_FMT
VALID_BEG = {ENV[VDATE]}

# End time for METplus run - must match VALID_TIME_FMT
VALID_END = {ENV[VDATE]}

# Increment between METplus runs (in seconds if no units are specified)
#  Must be >= 60 seconds
VALID_INCREMENT = 24H

# List of forecast leads to process for each run time (init or valid)
# In hours if units are not specified
# If unset, defaults to 0 (don't loop through forecast leads)
LEAD_SEQ = 000, 024, 048, 072, 096, 120, 144, 168, 192

# Order of loops to process data - Options are times, processes
# Not relevant if only one item is in the PROCESS_LIST
# times = run all wrappers in the PROCESS_LIST for a single run time, then
#   increment the run time and run all wrappers again until all times have
#   been evaluated.
# processes = run the first wrapper in the PROCESS_LIST for all times
#   specified, then repeat for the next item in the PROCESS_LIST until all
#   wrappers have been run
LOOP_ORDER = times

# Verbosity of MET output - overrides LOG_VERBOSITY for PointStat only
LOG_POINT_STAT_VERBOSITY = 4

# Location of MET config file to pass to PointStat
# References PARM_BASE which is the location of the parm directory corresponding
# to the ush directory of the run_metplus.py script that is called
# or the value of the environment variable METPLUS_PARM_BASE if set
POINT_STAT_CONFIG_FILE = {PARM_BASE}/met_config/PointStatConfig_wrapped

# Time relative to each input file's valid time (in seconds if no units are specified) for data within the file to be
# considered valid. Values are set in the 'obs_window' dictionary in the PointStat config file
OBS_POINT_STAT_WINDOW_BEGIN = -64800
OBS_POINT_STAT_WINDOW_END = 21600

# Optional list of offsets to look for point observation data
POINT_STAT_OFFSETS = 0

# Model/fcst and obs name, e.g. GFS, NAM, GDAS, etc.
MODEL = RTOFS
OBTYPE = BUOYS

POINT_STAT_DESC = NA

POINT_STAT_OUTPUT_PREFIX = {MODEL}_{OBTYPE}_SST

# Regrid to specified grid. Indicate NONE if no regridding, or the grid id
# (e.g. G212)
POINT_STAT_REGRID_TO_GRID = NONE
POINT_STAT_REGRID_METHOD = BILIN
POINT_STAT_REGRID_WIDTH = 2
#POINT_STAT_INTERP_TYPE_METHOD = NEAREST
#POINT_STAT_INTERP_TYPE_WIDTH = 1

# sets the -obs_valid_beg command line argument (optional)
# not used for this example
#POINT_STAT_OBS_VALID_BEG = {valid?fmt=%Y%m%d_%H}

# sets the -obs_valid_end command line argument (optional)
# not used for this example
#POINT_STAT_OBS_VALID_END = {valid?fmt=%Y%m%d_%H}

# Verification Masking regions
# Indicate which grid and polygon masking region, if applicable
POINT_STAT_MASK_GRID = 

# List of full path to poly masking files.
POINT_STAT_MASK_POLY = {OUTPUT_BASE}/prep/rtofs/rtofs.{valid?fmt=%Y%m%d}/{ENV[RUN]}/mask.global.nc, {OUTPUT_BASE}/prep/rtofs/rtofs.{valid?fmt=%Y%m%d}/{ENV[RUN]}/mask.north_atlantic.nc, {OUTPUT_BASE}/prep/rtofs/rtofs.{valid?fmt=%Y%m%d}/{ENV[RUN]}/mask.south_atlantic.nc, {OUTPUT_BASE}/prep/rtofs/rtofs.{valid?fmt=%Y%m%d}/{ENV[RUN]}/mask.equatorial_atlantic.nc, {OUTPUT_BASE}/prep/rtofs/rtofs.{valid?fmt=%Y%m%d}/{ENV[RUN]}/mask.north_pacific.nc, {OUTPUT_BASE}/prep/rtofs/rtofs.{valid?fmt=%Y%m%d}/{ENV[RUN]}/mask.south_pacific.nc, {OUTPUT_BASE}/prep/rtofs/rtofs.{valid?fmt=%Y%m%d}/{ENV[RUN]}/mask.equatorial_pacific.nc, {OUTPUT_BASE}/prep/rtofs/rtofs.{valid?fmt=%Y%m%d}/{ENV[RUN]}/mask.indian.nc, {OUTPUT_BASE}/prep/rtofs/rtofs.{valid?fmt=%Y%m%d}/{ENV[RUN]}/mask.southern.nc, {OUTPUT_BASE}/prep/rtofs/rtofs.{valid?fmt=%Y%m%d}/{ENV[RUN]}/mask.arctic.nc, {OUTPUT_BASE}/prep/rtofs/rtofs.{valid?fmt=%Y%m%d}/{ENV[RUN]}/mask.mediterranean.nc

POINT_STAT_STATION_ID =

# Message types, if all message types are to be returned, leave this empty,
# otherwise indicate the message types of interest.
POINT_STAT_MESSAGE_TYPE = SFCSHP

# use all the data that passed PB2NC threshold
POINT_STAT_OBS_QUALITY_INC =
POINT_STAT_DUPLICATE_FLAG = UNIQUE
POINT_STAT_OBS_SUMMARY = DW_MEAN

# Variables and levels as specified in the field dictionary of the MET
# point_stat configuration file. Specify as FCST_VARn_NAME, FCST_VARn_LEVELS,
# (optional) FCST_VARn_OPTION

# set to True to run PointStat once for each name/level combination
# set to False to run PointStat once per run time including all fields
POINT_STAT_ONCE_PER_FIELD = False

# fields to compare
# Note: If FCST_VAR<n>_* is set, then a corresponding OBS_VAR<n>_* variable must be set
# To use one variables for both forecast and observation data, set BOTH_VAR<n>_* instead
FCST_VAR1_NAME = sst
FCST_VAR1_LEVELS = "(0,*,*)"
FCST_VAR1_OPTIONS = set_attr_lead = "{lead?fmt=%3H}"; set_attr_level = "Z0";
OBS_VAR1_NAME = SST
OBS_VAR1_LEVELS = Z0
OBS_VAR1_OPTIONS = convert(x) = K_to_C(x); set_attr_units = "degC";
BOTH_VAR1_THRESH = >=0, >=26.5

# Set up climatology files and interpolation methods
POINT_STAT_CLIMO_MEAN_FILE_NAME = {ENV[COMINclimo]}/woa18_ncep/woa18_decav_t{ENV[SM]}_04_NCEP.nc, {ENV[COMINclimo]}/woa18_ncep/woa18_decav_t{ENV[EM]}_04_NCEP.nc
#POINT_STAT_CLIMO_MEAN_FIELD = {name = "t_an"; level = "(0,0,*,*)";}
POINT_STAT_MET_CONFIG_OVERRIDES = climo_mean = {field = [{name="t_an"; level="(0,0,*,*)";}];}
POINT_STAT_CLIMO_MEAN_REGRID_METHOD = BILIN
POINT_STAT_CLIMO_MEAN_REGRID_WIDTH = 2
POINT_STAT_CLIMO_MEAN_REGRID_VLD_THRESH = 0.5
POINT_STAT_CLIMO_MEAN_REGRID_SHAPE = SQUARE
POINT_STAT_CLIMO_MEAN_TIME_INTERP_METHOD = DW_MEAN
POINT_STAT_CLIMO_MEAN_DAY_INTERVAL = 31
POINT_STAT_CLIMO_MEAN_HOUR_INTERVAL = 6

POINT_STAT_CLIMO_CDF_WRITE_BINS = False

# Set up output files
#POINT_STAT_OUTPUT_FLAG_FHO = NONE
POINT_STAT_OUTPUT_FLAG_CTC = STAT
POINT_STAT_OUTPUT_FLAG_CTS = STAT
POINT_STAT_OUTPUT_FLAG_CNT = STAT
POINT_STAT_OUTPUT_FLAG_SL1L2 = STAT
POINT_STAT_OUTPUT_FLAG_SAL1L2 = STAT


# End of [config] section and start of [dir] section
[dir]

# directory containing forecast input to PointStat
FCST_POINT_STAT_INPUT_DIR = {OUTPUT_BASE}/prep/rtofs

# directory containing observation input to PointStat
OBS_POINT_STAT_INPUT_DIR = {OUTPUT_BASE}/prep/rtofs

# directory to write output from PointStat
POINT_STAT_OUTPUT_DIR = {OUTPUT_BASE}/stats/rtofs


# End of [dir] section and start of [filename_templates] section
[filename_templates]

# Template to look for forecast input to PointStat relative to FCST_POINT_STAT_INPUT_DIR
FCST_POINT_STAT_INPUT_TEMPLATE = rtofs.{init?fmt=%Y%m%d}/{ENV[RUN]}/rtofs_glo_2ds_f{lead?fmt=%3H}_prog.{ENV[RUN]}.nc

# Template to look for observation input to PointStat relative to OBS_POINT_STAT_INPUT_DIR
OBS_POINT_STAT_INPUT_TEMPLATE = rtofs.{valid?fmt=%Y%m%d}/{ENV[RUN]}/gdas.{valid?fmt=%Y%m%d%H}.nc

# Optional subdirectories relative to POINT_STAT_OUTPUT_DIR to write output from PointStat
POINT_STAT_OUTPUT_TEMPLATE = {ENV[RUN]}.{valid?fmt=%Y%m%d}

