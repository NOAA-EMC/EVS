#!/bin/bash

########################################
# Preliminary data setup step
########################################
set -xa

####################################
# SET SHELL PROCESSING VARIABLES
####################################
export PS4='$SECONDS + '
date

###########################################################
# obtain unique LSF id (jobid) and make temp directories
###########################################################
export pid=$$
export DATA=${DATA:-${DATAROOT:?}/${jobid:?}}
mkdir -p $DATA
cd $DATA

####################################
# Set EVS directories
####################################
export HOMEevs=${HOMEevs:-${PACKAGEROOT}/evs.${model_ver}}
export EXECevs=${EXECevs:-$HOMEevs/exec}
export FIXevs=${FIXevs:-$HOMEevs/fix}
export PARMevs=${PARMevs:-$HOMEevs/parm}
export USHevs=${USHevs:-$HOMEevs/ush}

####################################
# Run setpdy and initialize PDY variables
####################################
export cyc=${cyc:-"00"}
export cycle=${cycle:-t${cyc}z}
setpdy.sh
. ./PDY
export VDATE=${VDATE:-$PDYm1}

####################################
# Set data directives
####################################
export SENDECF=${SENDECF:-YES}
export SENDCOM=${SENDCOM:-YES}
export SENDDBN=${SENDDBN:-NO}

####################################
# Define NET/RUN variables
####################################
export NET=${NET:-evs}
export STEP=${STEP:-stats}
export COMPONENT=${COMPONENT:-global_det}
export RUN=${RUN:-atmos}
export machine=${machine:-WCOSS2}
####################################
# Define COMIN/COMOUT variables
####################################
export COMIN=${COMIN:-$(compath.py -o $NET/$evs_ver)}
export COMINgfs=${COMINgfs:-$(compath.py $envir/gfs/$gfs_ver)}
export COMINcfs=${COMINcfs:-$(compath.py -o $NET/$evs_ver/prep/$COMPONENT/$RUN)}
export COMINcmc=${COMINcmc:-$(compath.py -o $NET/$evs_ver/prep/$COMPONENT/$RUN)}
export COMINcmc_regional=${COMINcmc_regional:-$(compath.py -o $NET/$evs_ver/prep/$COMPONENT/$RUN)}
export COMINdwd=${COMINdwd:-$(compath.py -o $NET/$evs_ver/prep/$COMPONENT/$RUN)}
export COMINecmwf=${COMINecmwf:-$(compath.py -o $NET/$evs_ver/prep/$COMPONENT/$RUN)}
export COMINfnmoc=${COMINfnmoc:-$(compath.py -o $NET/$evs_ver/prep/$COMPONENT/$RUN)}
export COMINimd=${COMINimd:-$(compath.py -o $NET/$evs_ver/prep/$COMPONENT/$RUN)}
export COMINjma=${COMINjma:-$(compath.py -o $NET/$evs_ver/prep/$COMPONENT/$RUN)}
export COMINmetfra=${COMINmetfra:-$(compath.py -o $NET/$evs_ver/prep/$COMPONENT/$RUN)}
export COMINukmet=${COMINukmet:-$(compath.py -o $NET/$evs_ver/prep/$COMPONENT/$RUN)}
export COMINccpa=${COMINccpa:-$(compath.py $envir/ccpa/$ccpa_ver)}
export COMINghrsst_ospo=${COMINghrsst_ospo:-$(compath.py -o $NET/$evs_ver)}
export COMINget_d=${COMINget_d:-$(compath.py -o $NET/$evs_ver)}
export COMINndbc=${COMINndbc:-$(compath.py -o $NET/$evs_ver)}
export COMINnohrsc=${COMINnohrsc:-$DCOMROOT}
export COMINobsproc=${COMINobsproc:-$(compath.py $envir/obsproc/$obsproc_ver)}
export COMINosi_saf=${COMINosi_saf:-$(compath.py -o $NET/$evs_ver)}
export COMOUT=${COMOUT:-$(compath.py -o $NET/$evs_ver/$STEP/$COMPONENT)}
export COMOUTsmall=$COMOUT/$RUN.$VDATE/$MODELNAME/$VERIF_CASE
export COMOUTfinal=$COMOUT/$MODELNAME.$VDATE
mkdir -p $COMOUT $COMOUTsmall $COMOUTfinal
if [ $RUN = atmos ]; then
    if [ $VERIF_CASE == grid2grid ]; then
        export COMOUTccpa=$COMOUT/$RUN.$VDATE/ccpa/$VERIF_CASE
        mkdir -p $COMOUTccpa
    fi
    if [ $VERIF_CASE == grid2obs ]; then
        export COMOUTprepbufr=$COMOUT/$RUN.$VDATE/prepbufr/$VERIF_CASE
        mkdir -p $COMOUTprepbufr
    fi
fi
if [ $RUN = wave ]; then
    if [ $VERIF_CASE == grid2obs ]; then
        export COMOUTprepbufr=$COMOUT/$RUN.$VDATE/prepbufr/$VERIF_CASE
        mkdir -p $COMOUTprepbufr
        export COMOUTndbc=$COMOUT/$RUN.$VDATE/ndbc/$VERIF_CASE
        mkdir -p $COMOUTndbc
    fi
fi

#######################################################################
# Execute the script
#######################################################################
env
$HOMEevs/scripts/${STEP}/${COMPONENT}/exevs_${COMPONENT}_${RUN}_${VERIF_CASE}_${STEP}.sh
export err=$?; err_chk

msg="JOB $job HAS COMPLETED NORMALLY."
postmsg "$jlogfile" "$msg"

if [ "$KEEPDATA" != "YES" ] ; then
  cd $DATAROOT
  rm -rf $DATA
fi

date
